Что такое агрегация?
Частный случай композиции
Объект класса А управляет временем жизни объекта класса B
Объект класса А получает и использует ссылку при работе с объектом класса B и управляет временем жизни объекта класса B
Объект класса А получает и использует ссылку при работе с объектом класса B, при этом не управляет временем жизни объекта класса B

============================
Временная сложность вставки в бинарное дерево поиска
O(log(n))
O(n)
O(1)
O

============================
Основные принципы ООП
Абстракция данных
Наследование
Классы
Объекты
Абстракция данных
Полиморфизм
Наследование
Абстракция данных
Инкапсуляция
Полиморфизм
Наследование
Агрегация
Композиция
Абстракция данных
Инкапсуляция
Полиморфизм
Наследование

====================
Какие типы исключений в Java вы знаете?
unchecked
Err
uncheched
checkedors
checked

=======================
Возможно ли сделать конструктор закрытым?
Нет
Да
========================
Выберите правильный порядок инициализации полей объекта, для случая

public class Child extends Parent

Статические поля класса Parent
Статической блок инициализации класса Parent
Статическое поля класса Child
Статический блок инициализации класса Child
Нестатические поля класса Parent
Нестатические блок инициализации класса Parent
Конструктор класса  Parent
Нестатические поля класса Child
Нестатический блок инициализации класса Child
Конструктор класса Child
Конструктор класса  Parent
Конструктор класса Child
Статической блок инициализации класса Parent
Статический блок инициализации класса Child
Статические поля класса Parent
Статическое поля класса Child
Нестатические блок инициализации класса Parent
Нестатический блок инициализации класса Child
Нестатические поля класса Parent
Нестатические поля класса Child
Конструктор класса  Parent
Конструктор класса Child
Статические поля класса Parent
Статическое поля класса Child
Статической блок инициализации класса Parent
Статический блок инициализации класса Child
Нестатические поля класса Parent
Нестатические поля класса Child
Нестатические блок инициализации класса Parent
Нестатический блок инициализации класса Child
Конструктор класса  Parent
Конструктор класса Child
Статические поля класса Parent
Статической блок инициализации класса Parent
Статическое поля класса Child
Статический блок инициализации класса Child
Нестатические поля класса Parent
Нестатические блок инициализации класса Parent
Нестатические поля класса Child
Нестатический блок инициализации класса Child
===========================================
Временная сложность вставки в двусвязный список
O(log(n))
O
O(1)
O(n)

======================================
Для чего используется ключевое слово transient?
Указывает на то, что поле не подлежит сериализации
Указывает на то, только один поток должен работать с этой переменной, а все остальные ожидать
Указывает на то, что переменная не синхранизируемая
Указывает на то, что переменная будет доступна между нескольких потоков
========================================
Для чего необходим метод finalize?
Метод который будет вызван сборщиком мусора при уничтожении объекта
Метод который вызывается виртуальной машиной если у класса в сигнатуре есть ключевое слово final
Метод который вызывается если сработало исключение
Метод будет вызван когда объект будет выполняться в блоке finally
==========================================
Что выведет код?



public interface A {

    String myName = "I am A!";

}



public interface B {

    String myName = "I am B!";

}



public class Test implements A, B {

    public Test() {

        System.out.println(this.myName);

    }

}

Будет ошибка компиляции, т.к. интерфейсы могут иметь только объявления методов
I am A!
I am B!
Будет ошибка компиляции из-за неоднозначности this.myName
============================================
Что выведет следующий код:

public class Test {



    private Integer m;

    private int a;

    private int s;



    public void method() {

        s = m + a;

    }



    public static void main(String[] args) {

        Test t = new Test();

        t.method();

        System.out.println(t.s);

    }

}



Выведет: 1
Произойдет ошибка компиляции
Ошибка выполнения: java.lang.NullPointerException
Выведет: 0
==========================================
Что такое абстракция данных?
Концепция, согласно которой некоторый тип данных может наследовать данные и функциональность некоторого существующего типа, способствуя повторному использованию компонентов ПО


Концепция, согласно которой объект обладает способностью использовать методы производного класса, который не существует в момент создания базового класса.
Концепция, согласно которой некоторый тип данных может сокрыть какой либо функционал или данные, от окружающего мира и исключить влияние на их свойства извне.
Концепция, согласно которой объект можно описать только теми характеристиками, которых достаточно для точного предоставления его в данной системе, при этом их вполне достаточно чтобы решить с достаточной точностью поставленную задачу
===================================
Для чего используется ключевое слово synchronized?
Указывает на то, что переменная может быть синхронизированной
Указывает на то, что этот метод класс синхронизирован
Указывает на то, что несколько потоков без блокировки могут работать с этим блоком кода
Указывает на то, что метод синхронизированный или же в методе может находится такой же блок синхронизации
====================================
Что будет являться результатом работы данного кода?

public class Test {

    public static void main(String[] args) {

Integer iObj = new Integer(2);

switch (iObj) {

default:

System.out.println("default");

case 0:

System.out.println(0);

break;

case 1:

System.out.println(1);

 }

     }

}



Код скомпилируется, никаких сообщений не будет выведено
Код скомпилируется, вывод сообщений 
default

0

Код скомпилируется, вывод сообщения default
Ошибка компиляции
===================================
Каким образом параметры в методы, по значению или по ссылке?
Для примитивных типов по значению, для сложных типов по ссылке
по ссылке
по значению
==================================
Что будет результатом работы этого кода?

public class Test {

public class Sup {

       Sup() {

           System.out.println("Super default constructor");

       }



       Sup(int i) {

           System.out.println("Super(int) constructor");

       }

   }



   public class Sub extends Sup {

       Sub() {

           System.out.println("Sub default constructor");

       }



       Sub(String s) {

           System.out.println("Sub(String) constructor");

       }



       Sub(Object o) {

           this("");

           System.out.println("Sub(Object) constructor");

       }



       Sub(int i) {

           super(i);

           System.out.println("Sub(int) constructor");

       }

   }



    public static void main(String[] args) {

new Test().new Sub(new Object());

     }

}



Код скомпилируется, вывод сообщений 
Super default constructor

Sub(String) constructor

Sub(Object) constructor

Код скомпилируется, вывод сообщений 
Super default constructor

Sub(String) constructor

Sub(Object) constructor

Sub(int) constructor

Код скомпилируется, вывод сообщений 
Sub(String) constructor

Sub(Object) constructor


Ошибка компиляции
=========================
Какие модификаторы доступа есть в Java?
private
default (package - private)
protected
public
private
protected
public
inner
private
public
private
protected
public
=========================
Можно ли перехватить Throwable
Да
Нет, это интерфейс для классов Error и Exception
============================
Что такое Error?
Ошибка для пользователя, не является критической
Проверяемое исключение происходящее в процессе работы программы
Не фатальное исключение, происходящее в процессе работы программы
Критическая ошибка на уровне работы виртуальной машины или приложения, которую устранить практически невозможно
============================
Что такое наследование?
Концепция, согласно которой объект можно описать только теми характеристиками, которых достаточно для точного предоставления его в данной системе, при этом их вполне достаточно чтобы решить с достаточной точностью поставленную задачу
Концепция, согласно которой некоторый тип данных может наследовать данные и функциональность некоторого существующего типа, способствуя повторному использованию компонентов ПО
Концепция, согласно которой объект обладает способностью использовать методы производного класса, который не существует в момент создания базового класса.
Концепция, согласно которой некоторый тип данных может сокрыть какой либо функционал или данные, от окружающего мира и исключить влияние на их свойства извне.
==========================
Какие типы вложенных классов существуют
локальные классы
анонимные классы
локальные классы
анонимные классы
члены класса
статические члены класса
статические члены класса
абстрактные члены класса
члены класса с модификатором final
статические члены класса
члены класса с модификатором final
абстрактные члены класса
анонимные члены класса
===========================
Родительский интерфейс для Collection?
Интерфейс List
Интерфейс BeanContext
Интерфейс Iterable
Никакой, не наследуется от какого либо родительского интерфейса
===========================
Какова временная сложность поиска в обычном массиве?
O(n)
O(log(n))
O(1)
O
===============
Какой жизненный цикл можно указать для аннотации с помощью @Retention
SOURCE
CLASS
RUNTIME
RETENTION_POLICY
SOURCE
CLASS
RUNTIME
CLASS
RUNTIME
=======================
Что такое композиция
Частный случай композиции
Объект класса А управляет временем жизни объекта класса B
Объект класса А получает и использует ссылку при работе с объектом класса B, при этом не управляет временем жизни объекта класса B
Объект класса А получает и использует ссылку при работе с объектом класса B и управляет временем жизни объекта класса B
======================
Что такое рефлексия?
Механизм который позволяет быстро клонировать объекты
Это механизм который позволяет получить информацию об объектах во время выполнения программы, или изменить из свойства.
Требование при переопределении метода equals
Механизм который позволяет автоматически приводить примитивные типы к сложным, и обратно(к примеру int к Integer, double к Double  и обратно)
==========================
Можно ли наследоваться от String
Нет
Да
====================
Что будет результатом работы кода?

public class Test {

       enum DriverLicense {

           A(3) {

               @Override

               public void upgrade() {

                   year++;

               }

           }, B() {

               @Override

               public void upgrade() {

                   year += 2;

               }

           }, C(5) {

               @Override

               public void upgrade() {

               }

           };

           int year;



           DriverLicense() {

               System.out.println("Constructor: " + this.name());

           }



           DriverLicense(int year) {

               System.out.println("Constructor(year): " + this.name());

               this.year = year;

           }



           abstract void upgrade();

       }



       public static void main(String[] args) {

           for (DriverLicense dl : DriverLicense.values()) {

               System.out.println("Before upgrade " + dl.name() + ": " + dl.year + "year");

               dl.upgrade();

               System.out.println("After upgrade " + dl.name() + ": " + dl.year + "year");

           }

       }

  }




Ошибка компиляции
Код скомпилируется и выведет:

Constructor(year): A

Constructor: B

Constructor(year): C

Before upgrade A: 3year

After upgrade A: 4year

Before upgrade B: 0year

After upgrade B: 2year

Before upgrade C: 3year

After upgrade C: 3year

Код скомпилируется и выведет:

Constructor(year): A

Constructor: B

Constructor(year): C

Before upgrade A: 3year

After upgrade A: 4year

Before upgrade B: 0year

After upgrade B: 2year

Before upgrade C: 5year

After upgrade C: 5year

Код скомпилируется и выведет:

Constructor: A

Constructor: B

Constructor: C

Before upgrade A: 0year

After upgrade A: 1year

Before upgrade B: 0year

After upgrade B: 2year

Before upgrade C: 0year

After upgrade C: 0year

==============================
Временная сложность поиска в бинарном дереве поиска
O
O(1)
O(log(n))
O(n)
========================
Метод hashCode класса Object возвращает
String - который является уникальным хеш кодом текущего объекта
byte[] - который является хеш кодом текущего объекта
int - который является адресом в памяти этого объекта
long - который является хеш кодом текущего объекта
================================
Какова временная сложность поиска в двусвязном списке
O(1)
O(n)
O(log(n))
O
======================
Возможна ли конструкция try-finally
Нет
Да
=======================
Что произойдет если запустить этот код?

public class Test {



    public static void main(String[] args) {

        int i1 = 5;

        Integer i2 = new Integer(5);

        if (i1 == i2) {

            System.out.println("i1==i2");

        }



        String s1 = "hello world from " + 2016;

        String s2 = "hello world from 2016";

        if (s1 == s2) {

            System.out.println("s1==s2");

        }

    }

}



Ошибка компиляции
Код скомпилируется, никаких сообщений не будет выведено
Код скомпилируется, выведется сообщение:
s1==s2

Код скомпилируется, выведутся сообщения:
i1==i2

s1==s2
==========================
Что такое полиморфизм?
Концепция, согласно которой объект обладает способностью использовать методы производного класса, который не существует в момент создания базового класса.
Концепция, согласно которой некоторый тип данных может наследовать данные и функциональность некоторого существующего типа, способствуя повторному использованию компонентов ПО
Концепция, согласно которой объект можно описать только теми характеристиками, которых достаточно для точного предоставления его в данной системе, при этом их вполне достаточно чтобы решить с достаточной точностью поставленную задачу
Концепция, согласно которой некоторый тип данных может сокрыть какой либо функционал или данные, от окружающего мира и исключить влияние на их свойства извне.
=================================
Для чего используется ключевое слово volatile?
указывает на то, что переменная не подлежит сериализации
указывает на то, что переменная не подлежит синхронизации
указывает на то, что метод синхронизированный или же в методе может находится такой блок синхронизации
Указывает на то, что поле синхронизировано для нескольких потоков, и каждый из них не будет создавать локальную копию, а будет работать с оригинальными данными
========================================
Какие условия должны удовлетворяться при переопределении метода equals класса Object
проверка на null
проверка на равенство hashCode
транзитивность
симметричность
рефлексивность
проверка на null
рефлексивность
транзитивность
симметричность
сенситивность
проверка на null
транзитивность
симметричность
рефлексивность
========================
Что такое инкапсуляция?
Концепция, согласно которой некоторый тип данных может наследовать данные и функциональность некоторого существующего типа, способствуя повторному использованию компонентов ПО
Концепция, согласно которой объект обладает способностью использовать методы производного класса, который не существует в момент создания базового класса.
Концепция, согласно которой объект можно описать только теми характеристиками, которых достаточно для точного предоставления его в данной системе, при этом их вполне достаточно чтобы решить с достаточной точностью поставленную задачу
Концепция, согласно которой некоторый тип данных может сокрыть какой либо функционал или данные, от окружающего мира и исключить влияние на их свойства извне.
================================
Что выведет код?

String a = "test";

String b = new String("test");



if (a == b) {

System.out.print("a == b, ");

} else {

System.out.print("a != b, ");

}



b = b.intern();

if (a == b) {

System.out.println("a == b");

} else {

System.out.println("a != b");

}

a == b, a == b
a != b, a == b
a != b, a != b
a == b, a != b
